// INCLUDING MAIN DATABASE CLASS INTO THIS CLASS SO WE CAN PERFORM INSERT/UPDATE/DELETE OPERATIONS ON MAIN DATABASE.
const dbClass = require('../database/db');

// THIS FILE CONTAINS COMMON VARIABLES THAT WE CAN SHARE BETWEEN CLASSES. FOR EXAMPLE SITEVARIABLE, SITEMESSAGES ETC.
const store = require('../store');

// THIS NODE MODULE WILL BE USED FOR READING FILES FROM SERVER DIRECTORIES.
const fs = require ("fs"); // THIS MODULE WILL BE USED FOR READING FILES FROM SERVER DIRECTORIES.
const {roomSettings} = require('../store');

// STARTING THE Operator CLASS.
class Operator
{
	#Db; // PRIVATE VARIABLE TO HOLD INSTANCE OF DB CLASS.
	
	// CLASS CONSTRUCTOR; THIS WILL BE THE FIRST FUNCTION TO BE EXECUTED WHEN THIS CLASS LOADS.
	constructor ()
	{
		this.#Db = new dbClass(); // CREATING A NEW INSTANCE OF MAIN DB CLASS.
	}
	
	// RETURNS THE INSTANCE OF MAIN DB CLASS. SO ANY KIND OF UPDATE/DELETE/INSERT
	// ACTION CAN BE PERFORMED ON MAIN DATABASE.
	getDbInstance()
	{
		return this.#Db;
	}

	// GETTING SITE VARIABLES FROM STATIC DB AND STORING THEM INTO SERVER VARIABLE SO THEM CAN BE ACCESSED LATER.
	// THIS FUNCTION WILL ONLY RUN WHEN THE NODE SERVER STARTS OR WHEN WE REFRESH THE SERVER USING JUMPCODE.
	getSiteVariable()
	{
		let siteVariables = {}; // ARRAY TO HOLD SITEVARIABLES.

		// RUNNING THE QUERY ON STATIC DATABASE TO GET DATA FROM SITEVARIABLE TABLE.
		this.#Db.getRow ("SELECT * FROM sitevariable").then (sitevariable_row =>
		{
			console.log ('Site variables loaded');
			store.siteVariables = sitevariable_row;
		});
	}

	// GETTING SITE MESSAGES FROM MESSAGE TABLE.
	// THIS FUNCTION WILL ONLY RUN WHEN THE NODE SERVER STARTS OR WHEN WE REFRESH THE SERVER USING JUMPCODE.
	getSiteMessages()
	{
		let siteMessages = {}; // LOCAL VARIABLE TO HOLD SITE MESSAGES.
		
		// RUNNING THE QUERY ON STATIC DATABASE TO GET DATA FROM MESSAGE TABLE.
		this.#Db.getRows("SELECT  * FROM `message`").then(rows=>
		{
			// IF WE GOT THE DATA FROM TABLE.
			if (rows.length > 0)
			{
				// LOOPING THROUGH THE ROWS WE RETRIEVED FROM MESSAGE TABLE.
				rows.forEach (row =>
				{
					// SORTING MESSAGES BY MESSAGE SO WE CAN EASILY ACCESS THE VALUES.
					siteMessages[row.message_id] =
					{
						message: row.message, // ACTUAL MESSAGE THAT WE WILL DISPLAY TO USER.
						type: row.type, // GENERIC, FAILURE, SUCCESS, INFORMATION
						title: row.title, // IF MODE = POPUP, THIS MUST BE POPULATED.
						pages: row.pages // LIST OF PAGES ARE WE USING THIS MESSAGE.
					}
				});
				console.log ('Site messages loaded');

				// STORING IT IN STORE VARIABLE SO IT CAN BE ACCESSED FROM WHOLE APP.
				store.siteMessages = siteMessages;
			}
		})
	}
}

// EXPORTING THIS CLASS SO OTHER CLASSES CAN IMPORT AND USE IT.
module.exports = Operator;
